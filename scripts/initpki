#!/usr/bin/env python

import argparse
import getpass
import logging
import logging.config
import os
import platform
import sys
import tempfile

import yaml

sys.path.append('.')

from pkilib import log
from pkilib import ssl

# Set module details
__description__ = 'AS65342 PKI -- Initialization component'
__version__ = 0.2
__author__ = 'Lex van Roon'
__email__ = 'r3boot@r3blog.nl'
__url__ = 'https://gitlab.as65342.net/r3boot/pki'


# Various default values used as CLI arguments
_d_debug = False
_d_cfgfile = '/etc/pki/server.yml'
_d_logcfg = '/etc/pki/logging.yml'
_d_workspace = '/etc/pki'
_d_host = 'localhost'
_d_port = 4392
_d_root_pw = None
_d_inter_pw = None


if __name__ == '__main__':
    """ Main program to run
    """
    # Parse CLI arguments
    parser = argparse.ArgumentParser(description=__description__)
    parser.add_argument('-d', dest='debug', action='store_true',
                        default=_d_debug, help='Enable debugging')
    parser.add_argument('-l', dest='log_cfgfile', action='store',
                        type=str, default=_d_logcfg,
                        help='File containing the configuration for logging')
    parser.add_argument('-f', dest='cfgfile', action='store',
                        type=str, default=_d_cfgfile,
                        help='Configuration file to use ({0})'.format(
                            _d_cfgfile
                        ))
    parser.add_argument('-w', dest='workspace', action='store',
                        help='Override location where to store data')
    parser.add_argument('--root-pw', dest='root_pw', action='store',
                        type=str, default=_d_root_pw,
                        help='Password for Root CA')
    parser.add_argument('--inter-pw', dest='inter_pw', action='store',
                        type=str, default=_d_inter_pw,
                        help='Password for Intermediary CA')
    args = parser.parse_args()

    # Exit if we cannot find the configuration file for logging
    if not os.path.exists(args.log_cfgfile):
        print('Cannot find {0}, exiting'.format(args.log_cfgfile))
        sys.exit(1)

    # Setup logging framework
    log.LOGGER = log.get_handler(args.log_cfgfile, 'initpki')

    if args.debug:
        log.LOGGER.setLevel(logging.DEBUG)
    else:
        log.LOGGER.setLevel(logging.INFO)

    # Display the platform we're running on
    log.debug('Running under Python {0} on {1}'.format(
        platform.python_version(),
        os.uname()[0],
    ))

    # Exit if configuration file does not exist
    if not os.path.exists(args.cfgfile):
        log.error('{0} does not exist'.format(args.cfgfile))

    # All green, proceed with the program
    log.debug('Using configuration from {0}'.format(args.cfgfile))
    log.debug('Using {0} as a workspace'.format(args.workspace))

    # Setup a restrictive umask
    old_umask = os.umask(0o027)

    # Load configuration yaml
    raw_cfg = open(args.cfgfile, 'r').read()
    config = yaml.safe_load(raw_cfg)

    # Override configured workspace if needed
    config['common']['workspace'] = os.path.abspath(args.workspace)

    # Check if workspace directory exists
    if not os.path.exists(config['common']['workspace']):
        log.debug('Creating {0}'.format(config['common']['workspace']))
        os.mkdir(config['common']['workspace'])

    # Ask for the passwords for the Root CA
    root_pw = None
    if args.root_pw:
        root_pw = args.root_pw
    else:
        i = 0
        while True:
            if i >= 3:
                log.error('Too many failed passwords')

            root_pw = getpass.getpass('Enter password for Root CA: ')
            root_pw2 = getpass.getpass('Enter password for Root CA (again): ')
            if root_pw is None:
                log.warning('Password cannot be empty')
            elif len(root_pw) < 4:
                log.warning('Password must be 4 chars minimum')
            elif root_pw == root_pw2:
                root_pw2 = None
                break
            i += 1
        if not root_pw:
            log.error('No password found for Root CA')

    root_pw_fd = tempfile.NamedTemporaryFile()
    root_pw_fd.write('{0}\n'.format(root_pw).encode())
    root_pw_fd.flush()
    root_pw = root_pw_fd.name

    # Ask for the passwords for the Intermediary CA
    inter_pw = None
    if args.inter_pw:
        inter_pw = args.inter_pw
    else:
        i = 0
        pw2str = 'Enter password for Intermediary CA (again): '
        while True:
            if i >= 3:
                log.error('Too many failed passwords')

            inter_pw = getpass.getpass('Enter password for Intermediary CA: ')
            i_pw2 = getpass.getpass(pw2str)
            if inter_pw is None:
                log.warning('Password cannot be empty')
            elif len(inter_pw) < 4:
                log.warning('Password must be 4 chars minimum')
            elif inter_pw == i_pw2:
                inter_pw2 = None
                break
            i += 1
        if not inter_pw:
            log.error('No password found for Intermediary CA')

    inter_pw_fd = tempfile.NamedTemporaryFile()
    inter_pw_fd.write('{0}'.format(inter_pw).encode())
    inter_pw_fd.flush()
    inter_pw = inter_pw_fd.name

    # Setup Root CA
    root = ssl.OpenSSL(config, ssl.CA_ROOT)
    name = root.ca_data['name']
    cfg = root.ca_data['cfg']
    if not root.setup_ca_structure():
        log.error('Failed to setup CA structure for {0}'.format(name))

    if not root.genkey(cfg, name, pwfile=root_pw):
        log.error('Failed to generate key and CSR for {0}'.format(name))

    if not root.selfsign(name, pwfile=root_pw):
        log.error('Failed to self-sign certificate for {0}'.format(name))

    if not root.updatecrl(pwfile=root_pw):
        log.error('Failed to update CRL for {0}'.format(name))

    # Setup intermediary CA
    intermediary = ssl.OpenSSL(config, ssl.CA_INTERMEDIARY)
    name = intermediary.ca_data['name']
    cfg = intermediary.ca_data['cfg']
    csr = intermediary.ca_data['csr']
    crt = intermediary.ca_data['crt']
    days = intermediary.ca_data['days']
    if not intermediary.setup_ca_structure():
        log.error('Failed to setup CA structure for {0}'.format(name))

    if not intermediary.genkey(cfg, name, pwfile=root_pw):
        log.error('Failed to generate key and CSR for {0}'.format(name))

    if not root.sign_intermediary(csr, crt, pwfile=root_pw, days=days):
        log.error('Failed to self-sign certificate for {0}'.format(name))

    if not intermediary.updatebundle(parent=root):
        log.error('Failed to generate bundle for {0}'.format(name))

    if not intermediary.updatecrl(pwfile=root_pw):
        log.error('Failed to update CRL for {0}'.format(name))

    # Setup Autosign CA
    autosign = ssl.OpenSSL(config, ssl.CA_AUTOSIGN)
    name = autosign.ca_data['name']
    cfg = autosign.ca_data['cfg']
    csr = autosign.ca_data['csr']
    crt = autosign.ca_data['crt']
    days = autosign.ca_data['days']
    if not autosign.setup_ca_structure():
        log.error('Failed to setup CA structure for {0}'.format(name))

    if not autosign.genkey(cfg, name, pwfile=root_pw):
        log.error('Failed to generate key and CSR for {0}'.format(name))

    if not intermediary.sign_intermediary(csr, crt, pwfile=root_pw, days=days):
        log.error('Failed to self-sign certificate for {0}'.format(name))

    if not autosign.updatebundle(parent=intermediary):
        log.error('Failed to generate bundle for {0}'.format(name))

    if not autosign.updatecrl(pwfile=root_pw):
        log.error('Failed to update CRL for {0}'.format(name))

    # Cleanup tempfiles
    root_pw_fd.close()
    inter_pw_fd.close()

    # Restore original umask
    os.umask(old_umask)
