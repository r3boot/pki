#!/usr/bin/env python

import argparse
import hashlib
import json
import logging
import logging.config
import os
import platform
import shlex
import socket
import subprocess
import sys
import re
import random
import threading
import time


# Handle external dependencies
try:
    import bottle
except ImportError:
    print('Failed to import bottle, please run "pip install bottle"')
    sys.exit(1)

try:
    import mako.template
except ImportError:
    print('Failed to import mako, please run "pip install mako"')
    sys.exit(1)


try:
    import requests
except ImportError:
    print('Failed to import requests, please run "pip install requests"')
    sys.exit(1)

try:
    import yaml
except ImportError:
    print('Failed to import PyYaml, please run "pip install pyyaml"')
    sys.exit(1)


# Set module details
__description__ = 'AS65342 PKI -- Client component'
__version__ = 0.2
__author__ = 'Lex van Roon'
__email__ = 'r3boot@r3blog.nl'
__url__ = 'https://gitlab.as65342.net/r3boot/pki'


# Various default values used as CLI arguments
_d_debug = False
_d_url = 'http://127.0.0.1:4392'
_d_cfgfile = '/etc/pki/client.yml'
_d_logcfg = '/etc/pki/logging.yml'
_d_workspace = '/etc/pki'
_d_x509 = '/etc/ssl'
_d_vhost = None


# Global variable containing the python logger
logger = None


# Template for a tls vhost request
tls_vhost_template = """# TLS vhost certificate request for ${fqdn}

[ default ]
SAN                     = DNS:${fqdn}    # Default value

[ req ]
default_bits            = ${certs['bits']}                  # RSA key size
encrypt_key             = no                    # Protect private key
default_md              = ${certs['hash']}                  # MD to use
utf8                    = yes                   # Input is UTF-8
string_mask             = utf8only              # Emit UTF-8 strings
prompt                  = no                   # Prompt for DN
distinguished_name      = server_dn             # DN template
req_extensions          = server_reqext         # Desired extensions

[ server_dn ]
CN                      = ${fqdn}
C                       = ${certs['country']}
ST                      = ${certs['province']}
L                       = ${certs['city']}
O                       = ${certs['organization']}
OU                      = ${certs['unit']}

[ server_reqext ]
keyUsage                = critical,digitalSignature,keyEncipherment
extendedKeyUsage        = serverAuth,clientAuth
subjectKeyIdentifier    = hash
subjectAltName          = DNS:${fqdn}
"""


# Template for a tls server request
tls_server_template = """# TLS server certificate request for ${fqdn}

[ default ]
SAN                     = DNS:${fqdn}    # Default value

[ req ]
default_bits            = ${certs['bits']}                  # RSA key size
encrypt_key             = no                    # Protect private key
default_md              = ${certs['hash']}                  # MD to use
utf8                    = yes                   # Input is UTF-8
string_mask             = utf8only              # Emit UTF-8 strings
prompt                  = no                   # Prompt for DN
distinguished_name      = server_dn             # DN template
req_extensions          = server_reqext         # Desired extensions

[ server_dn ]
CN                      = ${fqdn}
C                       = ${certs['country']}
ST                      = ${certs['province']}
L                       = ${certs['city']}
O                       = ${certs['organization']}
OU                      = ${certs['unit']}

[ server_reqext ]
keyUsage                = critical,digitalSignature,keyEncipherment
extendedKeyUsage        = serverAuth,clientAuth
subjectKeyIdentifier    = hash
subjectAltName          = DNS:${san}
"""


def run(cmd, stdin=False, stdout=False):
    """ run:        Wrapper around subprocess.Popen to setup the various FDs

    @param:     stdin   If True, make stdin a PIPE, else None
    @param:     stdout  If True, make stdout a PIPE, else None
    @return:    proc    Object containing the Popen result
    """
    cmd = shlex.split(cmd)

    stdin_fd = None
    if stdin:
        stdin_fd = subprocess.PIPE

    stdout_fd = None
    if stdout:
        stdout_fd = subprocess.PIPE

    return subprocess.Popen(cmd, stdin=stdin_fd, stdout=stdout_fd)


def info(message):
    """ info:           Display an informational message

    @param:     message Message to display
    """
    logger.info(message)


def warning(message):
    """ warning:    Display a warning message

    @param:     message Message to display
    """
    logger.warning(message)


def debug(message):
    """ warning:    Display a debug message if debugging is enabled

    @param:     message Message to display
    """
    logger.debug(message)


def error(message):
    """ warning:    Display an error message and exit the application

    @param:     message Message to display
    """
    logger.error(message)
    sys.exit(1)


class APIClient:
    """ APIClient:      Class containing a set of methods to talk with the
                        server-side component of the PKI infrastructure
    """
    def __init__(self, config):
        """ __init__:   Initialize APIClient class

        @param:     config  Dictionary containing the configuration data
        """
        self._cfg = config
        self._api_base = config['api']['url']
        self._s = requests.session()

    def _serialize(self, data):
        """ _serialize: Returns a serialized version of data

        @param:     data    Variable to be serialized
        @return:    str     String containing a JSONified version of data
        """
        return json.dumps(data)

    def _request(self, method, path, payload={}):
        """ _request:   Performs a http request with an optional payload

        @param:     method  HTTP method to use (GET/POST/DELETE)
        @param:     path    Path on the api to call
        @param:     payload Dictionary containing the payload to send
        @return:    dict    Dictionary containing the result from the request
        """
        response = {}
        url = self._api_base + path
        r = None
        if payload:
            payload = self._serialize(payload)
        try:
            if method == 'get':
                r = self._s.get(url)
            elif method == 'post':
                r = self._s.post(url, data=payload)
            elif method == 'delete':
                r = self._s.delete(url, data=payload)
            else:
                error('Invalid request method')
        except requests.exceptions.ConnectionError as e:
            error(e)
        finally:
            if not r:
                response = {'result': False, 'content': 'Unknown error'}
            elif r.status_code == 200:
                response = {'result': True, 'content': r.content}

        return response

    def get(self, path, payload={}):
        """ get:    Wrapper around _request to perform a GET request

        @param:     path    Path on the API to place the call on
        @param:     payload Dictionary containing the payload
        @returns:   dict    Dictionary containing the response of the request
        """
        return self._request('get', path, payload)

    def post(self, path, payload={}):
        """ post:   Wrapper around _request to perform a POST request

        @param:     path    Path on the API to place the call on
        @param:     payload Dictionary containing the payload
        @returns:   dict    Dictionary containing the response of the request
        """
        return self._request('post', path, payload)

    def delete(self, path, payload={}):
        """ delete: Wrapper around _request to perform a DELETE request

        @param:     path    Path on the API to place the call on
        @param:     payload Dictionary containing the payload
        @returns:   dict    Dictionary containing the response of the request
        """
        return self._request('delete', path, payload)

    def initialize_client(self, fqdn, token):
        """ initialize_client:  Retrieve a new token and configuration file

        @param:     fqdn    Fully-Qualified Domain-Name for this host
        @param:     token   Initial installation token to use
        """
        path = '/v1/token'
        payload = {
            'fqdn': fqdn,
            'token': token,
        }
        info('Sending request for new token')
        response = self.post(path, payload=payload)
        if not response['result']:
            error('Failed to retrieve a token: {0}'.format(
                response['content'])
            )
        debug('Received new token, writing configuration')
        cfg_data = response['content']
        cfg_file = '{0}/client.yml'.format(self._cfg['workspace'])
        open(cfg_file, 'w').write('{0}\n'.format(cfg_data))

    def new_server_cert(self, fqdn, vhost=False):
        """ new_server_cert:    Request a new signed certificate

        @param:     fqdn    Fully-Qualified Domain-Name to request a cert for
        @param:     vhost   If True, this is a request for a vhost instead of
                            the fqdn for this host
        """
        san = fqdn.split('.')[0]
        path = '/v1/sign'
        key = '{0}/private/{1}.key'.format(self._cfg['x509'], fqdn)
        cfg = '{0}/cfg/{1}.cfg'.format(self._cfg['x509'], fqdn)
        csr = '{0}/csr/{1}.csr'.format(self._cfg['x509'], fqdn)
        crt = '{0}/certs/{1}.pem'.format(self._cfg['x509'], fqdn)

        if vhost:
            template_data = tls_vhost_template
        else:
            template_data = tls_server_template

        template = mako.template.Template(template_data)
        cfg_data = template.render(
            fqdn=fqdn,
            san=san,
            certs=self._cfg['certs']
        )
        open(cfg, 'w').write(cfg_data)

        info('Generating key and csr for {0}'.format(fqdn))
        cfg_file = '{0}/cfg/{1}.cfg'.format(self._cfg['workspace'], fqdn)
        cmdline = 'openssl req -new -config {0} -out {1} -keyout {2}'.format(
            cfg_file, csr, key
        )
        proc = run(cmdline)
        proc.communicate()

        info('Sending csr to {0}'.format(self._cfg['api']['url']))
        csr_data = open(csr, 'r').read()
        payload = {
            'fqdn': fqdn,
            'hostname': socket.gethostname(),
            'csr': csr_data,
            'token': self._cfg['api']['token'],
        }
        response = self.post(path, payload=payload)
        if not response['result']:
            error('Failed to retrieve a certificate: {0}'.format(
                response['content']
            ))

        info('Got certificate for {0}'.format(fqdn))
        open(crt, 'w').write(response['content'].decode('utf-8'))

    def revoke(self, fqdn):
        """ revoke:     Request a certificate to be revoked

        @param:     fqdn    Fully-Qualified Domain-Name to be revoked
        """
        path = '/v1/revoke'

        payload = {
            'fqdn': fqdn,
            'hostname': socket.gethostname(),
            'token': self._cfg['api']['token'],
        }
        response = self.delete(path, payload=payload)
        if not response['result']:
            error('Failed to revoke certificate: {0}'.format(
                response['content']
            ))

        info('Revoked certificate for {0}'.format(fqdn))


class ManagedWSGIServer(bottle.ServerAdapter):
    """ ManagedWSGIServer:  Wrapper around WSGIRequestHandler so it can be
                            stopped on request
    """
    server = None
    quiet = True

    def run(self, handler):
        """ run:    Start the managed server

        @param:     handler Object containing the handler for the http requests
        """
        from wsgiref.simple_server import make_server, WSGIRequestHandler
        if self.quiet:
            class QuietHandler(WSGIRequestHandler):
                def log_request(*args, **kw): pass
            self.options['handler_class'] = QuietHandler
        self.server = make_server(
            self.host,
            self.port,
            handler,
            **self.options
        )
        self.server.serve_forever()

    def stop(self):
        """ stop:   Stop the managed server
        """
        self.server.shutdown()


class ValidatorAPI(threading.Thread):
    """ ValidatorAPI:   Thread containing the client-side validator api
    """

    def __init__(self, host=None, port=None):
        """ __init__:   Initialize the ValidatorAPI class

        @param:     host    IP address or host to bind api on
        @param:     port    Port to bind api on
        """
        if not host:
            error('ValidateAPI needs a listen ip')
        self.host = host

        if not port:
            error('ValidateAPI needs a listen port')
        self.port = port

        self._app = bottle.Bottle()
        self._server = ManagedWSGIServer(host=host, port=port)
        self._app.route('/v1/validate', method='GET',
                        callback=self.serve_token)
        sha = hashlib.sha256()
        sha.update(str(random.random()).encode('utf-8'))
        self.token = sha.hexdigest()

        threading.Thread.__init__(self)
        self.setDaemon(True)

    def serve_token(self):
        """ serve_token:    Return the initial installation token

        @return:    str     String containing the initial token
        """
        return self.token

    def initialize_client(self, url, cfg_file, fqdn):
        """ initialize_client:  Perform an initialization of this client
                                by performing an http request to the server
                                with a temporary token, and receiving a
                                configuration file with a permanent token
        @param:     url         URL on which the server can be found
        @param:     cfg_file    Where to store the new configuration
        @param:     fqdn        Fully-Qualified Domain-Name for this host
        """
        path = '{0}/v1/token'.format(url)
        payload = json.dumps({'fqdn': fqdn, 'token': self.token})
        info('Sending request for new token')
        r = None
        cfg_data = None
        try:
            r = requests.post(path, data=payload)
        except requests.exceptions.ConnectionError as e:
            error(e)
        finally:
            if not r:
                error('Unknown error trying to request a token')
            elif r and r.status_code != 200:
                error('Unknown return code received from pki')
            else:
                cfg_data = r.content.decode('utf-8')

        info('Received new token, writing configuration to {0}'.format(
            cfg_file
        ))

        open(cfg_file, 'w').write('{0}\n'.format(cfg_data))

    def run(self):
        """ run:    Start the local validator API
        """
        try:
            self._app.run(server=self._server)
        except socket.error as e:
            error('Validator failed to start: {0}'.format(e))

    def stop(self):
        """ stop:   Stop the local validator API
        """
        self._server.stop()


if __name__ == '__main__':
    """ __main__:   Main program to execute
    """
    # Parse CLI arguments
    parser = argparse.ArgumentParser(description=__description__)
    parser.add_argument('-d', dest='debug', action='store_true',
                        default=_d_debug, help='Enable debugging')
    parser.add_argument('-l', dest='log_cfgfile', action='store',
                        type=str, default=_d_logcfg,
                        help='File containing the configuration for logging')
    parser.add_argument('-f', dest='cfgfile', action='store',
                        type=str, default=_d_cfgfile,
                        help='Configuration file to use ({0})'.format(
                            _d_cfgfile
                        ))
    parser.add_argument('-u', dest='url', action='store',
                        type=str, default=_d_url,
                        help='API URL to use (during initialization)')
    parser.add_argument('-w', dest='workspace', action='store',
                        type=str, default=_d_workspace,
                        help='Override location where to store configuration')
    parser.add_argument('-o', dest='x509', action='store',
                        type=str, default=_d_x509,
                        help='Override location where to store x509 data')
    parser.add_argument('--vhost', dest='vhost', action='store',
                        type=str, default=_d_vhost,
                        help='Generate a certificate for a virtual host')
    parser.add_argument('operation', nargs=1, type=str,
                        help='Operation to perform (newcert, revoke)')
    args = parser.parse_args()

    # Exit if we cannot find the configuration file for logging
    if not os.path.exists(args.log_cfgfile):
        print('Cannot find {0}, exiting'.format(args.log_cfgfile))
        sys.exit(1)
    log_cfg = yaml.load(open(args.log_cfgfile, 'r').read())

    # Setup logging framework
    logging.config.dictConfig(log_cfg)
    logger = logging.getLogger('pkiclient')

    if args.debug:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    # Display the platform we're running on
    debug('Running under Python {0} on {1}'.format(
        platform.python_version(),
        os.uname()[0]
    ))

    # Exit if an operation is specified, and if it's valid
    operation = args.operation[0]
    if operation not in ['newcert', 'revoke']:
        parser.print_help()
        print('')
        error('{0} is an invalid operation'.format(operation))

    # Setup the hostname and fqdn for the certificate request
    hostname = socket.gethostname()
    is_vhost = False
    if args.vhost:
        fqdn = args.vhost
        is_vhost = True
    else:
        fqdn = hostname

    # Check if fqdn matches a valid rfc1123 hostname
    regexp = '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*'
    regexp += '([A-Za-z0-9]  |[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$'
    r = re.compile(regexp)
    result = r.search(fqdn)
    if not result:
        error('{0} is not a valid fqdn'.format(fqdn))

    # Setup a restrictive umask
    old_umask = os.umask(0o027)

    # Check if workspace directory exists
    workspace = os.path.abspath(args.workspace)
    if not os.path.exists(workspace):
        debug('Creating {0}'.format(workspace))
        os.mkdir(workspace)

    # Request a new token + config file
    if not os.path.exists(args.cfgfile):
        info('No configuration found, requesting new token and configuration')

        # Get the fqdn and prepare settings
        host = socket.gethostbyname(hostname)
        if host:
            debug('Looked up ip as {0}'.format(host))
        else:
            error('Failed to lookup ptr record for {0}'.format(hostname))
        port = 4393

        # Start the validator service
        validator = ValidatorAPI(host=host, port=port)
        info('Starting validator service')
        validator.start()

        # Wait for validator service startup
        time.sleep(0.5)

        # Receive a new tokenized configuration
        validator.initialize_client(args.url, args.cfgfile, hostname)

        info('Stopping validator service')
        validator.stop()

        # Setup required directories
        req_dirs = ['certs', 'cfg', 'crl', 'csr', 'private']
        for directory in req_dirs:
            full_dir = '{0}/{1}'.format(args.x509, directory)
            if not os.path.exists(full_dir):
                warning('Creating {0}'.format(full_dir))
                try:
                    os.mkdir(full_dir)
                except OSError as e:
                    error('Failed to create directory: {1}'.format(
                        full_dir, e
                    ))

    # Load the configuration yaml
    raw_cfg = open(args.cfgfile, 'r').read()
    config = yaml.safe_load(raw_cfg)

    # Set workspace and x509 directory
    config['workspace'] = workspace
    config['x509'] = args.x509

    # All green, proceed with the program
    debug('Using configuration from {0}'.format(args.cfgfile))
    debug('Using {0} as the workspace'.format(workspace))
    debug('Using {0} as the x509 store'.format(args.x509))
    debug('Using {0} as the fqdn'.format(fqdn))

    autosign = APIClient(config)
    if operation == 'newcert':
        autosign.new_server_cert(fqdn, vhost=is_vhost)
    elif operation == 'revoke':
        autosign.revoke(fqdn)

    # Restore original umask
    os.umask(old_umask)
