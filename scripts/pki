#!/usr/bin/env python2

import argparse
import os
import sys
import yaml

sys.path.append('.')

from pki.logging    import *
from pki            import openssl
from pki            import service

__description__ = 'AS65342 PKI -- Server component'

## Various default values used as CLI arguments
_d_debug = False
_d_cfgfile = '/etc/pki/server.yml'
_d_workspace = '/etc/pki'
_d_host = 'localhost'
_d_port = 4392

if __name__ == '__main__':
    ## Parse CLI arguments
    parser = argparse.ArgumentParser(description=__description__)
    parser.add_argument('-D', dest='debug', action='store_true',
        default=_d_debug, help='Enable debugging')
    parser.add_argument('-f', dest='cfgfile', action='store',
        type=str, default=_d_cfgfile,
        help='Configuration file to use ({0})'.format(_d_cfgfile))
    parser.add_argument('-w', dest='workspace', action='store',
        help='Override location where to store data')
    parser.add_argument('-l', dest='host', action='store',
        type=str, default=_d_host,
        help='Ip address on which to bind the PKI service')
    parser.add_argument('-p', dest='port', action='store',
        type=int, default=_d_port,
        help='Port on which to bind the PKI service')
    parser.add_argument('operation', nargs=1, type=str,
        help='Operation to perform (init, serve)')
    args = parser.parse_args()

    ## Initialize debug logging
    setup_logging(args.debug)

    ## Exit if configuration file does not exist
    if not os.path.exists(args.cfgfile):
        error('{0} does not exist'.format(args.cfgfile))

    ## Exit if we have nothing to do
    if len(args.operation) == 0 or args.operation[0] not in ['init', 'serve']:
        parser.print_help()
        print('')
        error("operation needs to be 'init' or 'serve'")
    operation = args.operation[0]

    ## All green, proceed with the program
    debug('Using configuration from {0}'.format(args.cfgfile))
    debug('Using {0} as a workspace'.format(args.workspace))

    ## Setup a restrictive umask
    old_umask = os.umask(027)

    ## Load configuration yaml
    raw_cfg = open(args.cfgfile, 'r').read()
    config = yaml.safe_load(raw_cfg)

    ## Override configured workspace if needed
    config['common']['workspace'] = os.path.abspath(args.workspace)

    ## Check if workspace directory exists
    if not os.path.exists(config['common']['workspace']):
        warning('Creating {0}'.format(config['common']['workspace']))
        os.mkdir(config['common']['workspace'])

    if operation == 'serve':
        service.ca = openssl.AutosignCA(config, name='as65342-servers-autosign')
        # Eww
        for ca_data in config['autosign']:
            if ca_data['name'] != 'servers':
                continue
            service.ca.cfg['common'].update(ca_data)
        service.run(host=args.host, port=args.port)
    elif operation == 'init':
        root = openssl.RootCA(config)
        root.setup()
        root.initca()
        root.updatecrl()

        intermediary = openssl.IntermediaryCA(config)
        intermediary.setup()
        intermediary.initca(parent=root)
        intermediary.updatecrl()

        autosign_cas = {}
        for ca in config['autosign']:
            name = '{0}-{1}-autosign'.format(config['common']['name'], ca['name'])
            autosign_cas[name] = openssl.AutosignCA(config, name=name)
            autosign_cas[name].setup(ca_data=ca)
            autosign_cas[name].initca(parent=intermediary)
            autosign_cas[name].updatecrl()

    ## Restore original umask
    os.umask(old_umask)
