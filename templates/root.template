# ${cn}

[ default ]
ca                      = ${name}      # CA name
dir                     = .           # Top dir
base_url                = ${baseurl}           # CA base URL
aia_url                 = ${baseurl}/${name}.pem     # CA certificate URL
crl_url                 = ${baseurl}/${name}.crl     # CRL distribution point
% if ca_type == "autosign":
ocsp_url                = ${ocspurl}
% endif
name_opt                = multiline,-esc_msb,utf8 # Display UTF-8 characters
openssl_conf            = openssl_init          # Library config section

# CA certificate request

[ req ]
default_bits            = ${crypto['bits']}              # RSA key size
% if ca_type == "autosign":
encrypt_key             = no                   # Protect private key
% else:
encrypt_key             = yes                   # Protect private key
% endif
default_md              = ${crypto['hash']}              # MD to use
utf8                    = yes                   # Input is UTF-8
string_mask             = utf8only              # Emit UTF-8 strings
prompt                  = no                    # Don't prompt for DN
distinguished_name      = ca_dn                 # DN section
req_extensions          = ca_reqext             # Desired extensions

[ ca_dn ]
countryName             = "${country}"
stateOrProvinceName     = "${province}"
localityName            = "${city}"
organizationName        = "${organization}"
organizationalUnitName  = "${unit}"
commonName              = "${cn}"

[ ca_reqext ]
keyUsage                = critical,keyCertSign,cRLSign
% if ca_type == "autosign":
basicConstraints        = critical,CA:true,pathlen:0
% else:
basicConstraints        = critical,CA:true
% endif
subjectKeyIdentifier    = hash

# CA operational settings

[ ca ]
default_ca              = ${name}         # The default CA section

[ ${name} ]
certificate             = ${crt}       # The CA cert
private_key             = ${key} # CA private key
new_certs_dir           = ${certsdir}           # Certificate archive
serial                  = ${crt_idx} # Serial number file
crlnumber               = ${crl_idx} # CRL number file
database                = ${db} # Index file
unique_subject          = no                    # Require unique subject
default_days            = ${days}        # How long to certify for
default_md              = ${crypto['hash']}              # MD to use
policy                  = match_pol             # Default naming policy
email_in_dn             = no                    # Add email to cert DN
preserve                = no                    # Keep passed DN ordering
name_opt                = $name_opt             # Subject DN display options
cert_opt                = ca_default            # Certificate display options
% if ca_type == "autosign":
copy_extensions         = copy # Copy extensions from CSR
% else:
copy_extensions         = none                  # Copy extensions from CSR
% endif
% if ca_type == "root":
x509_extensions         = intermediate_ca_ext   # Default cert extensions
default_crl_days        = 30                    # How long before next CRL
% elif ca_type == "intermediary":
x509_extensions         = signing_ca_ext        # Default cert extensions
default_crl_days        = 1                     # How long before next CRL
% elif ca_type == "autosign":
x509_extensions         = server_ext           # Default cert extensions
default_crl_days        = 1                     # How long before next CRL
% endif
crl_extensions          = crl_ext               # CRL extensions

[ match_pol ]
countryName             = match
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied

[ any_pol ]
domainComponent         = optional
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = optional
emailAddress            = optional

# Extensions
% if ca_type == "root":
[ root_ca_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always
% endif %}
% if ca_type != "autosign":
[ intermediate_ca_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always
authorityInfoAccess     = @issuer_info
crlDistributionPoints   = @crl_info
certificatePolicies     = MediumAssurance,MediumDevice
% endif
% if ca_type == "intermediate":
[ signing_ca_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true,pathlen:0
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always
authorityInfoAccess     = @issuer_info
crlDistributionPoints   = @crl_info
certificatePolicies     = MediumAssurance,MediumDevice
% endif
% if ca_type == "autosign":
[ server_ext ]
keyUsage                = critical,digitalSignature,keyEncipherment
basicConstraints        = CA:false
extendedKeyUsage        = serverAuth,clientAuth
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always
authorityInfoAccess     = @ocsp_info
crlDistributionPoints   = @crl_info
certificatePolicies     = MediumDevice

[ ocspsign_ext ]
keyUsage                = critical,nonRepudiation,digitalSignature
basicConstraints        = CA:false
extendedKeyUsage        = critical,OCSPSigning
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always
authorityInfoAccess     = @issuer_info
noCheck                 = null
certificatePolicies     = MediumDevice
% endif

[ crl_ext ]
authorityKeyIdentifier  = keyid:always
authorityInfoAccess     = @issuer_info

% if ca_type == "autosign":
[ ocsp_info ]
caIssuers;URI.0         = ${baseurl}/${name}.pem
OCSP;URI.0              = ${ocspurl}

% endif
[ issuer_info ]
caIssuers;URI.0         = ${baseurl}/${name}.pem

[ crl_info ]
URI.0                   = ${baseurl}/${name}.crl

# Policy OIDs

[ openssl_init ]
oid_section             = additional_oids

[ additional_oids ]
% if ca_type != "autosign":
MediumAssurance     = AS65342 Medium Assurance, 1.3.6.1.4.1.0.1.7.8
% endif
MediumDevice        = AS65342 Medium Device Assurance, 1.3.6.1.4.1.0.1.7.9
